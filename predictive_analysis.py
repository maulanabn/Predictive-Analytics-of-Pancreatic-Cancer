# -*- coding: utf-8 -*-
"""Baharuddin Nur Maulana_Submission_Predictive Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Qqj8o9A7OVwLaaRW-cHX0xXowfPjKH5

#**Proyek Predictive Analysis : Prediksi Penyakit Kanker Pankreas Pada Manusia**

### by : Baharuddin Nur Maulana

##Import Library
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import zipfile
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

"""##Import Kaggle"""

! pip install -q kaggle

from google.colab import files
files.upload()

! mkdir -p ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download -d johnjdavisiv/urinary-biomarkers-for-pancreatic-cancer

! unzip urinary-biomarkers-for-pancreatic-cancer.zip

"""##Data Understanding

## Import Dataset
"""

df=pd.read_csv('Debernardi et al 2020 data.csv')
df

"""Dari dataset diatas, kita dapat melihat bahwa dataset tersebut memiliki 590 baris dan 14 kolom."""

df.isnull().sum()

"""Dari informasi diatas, menunjukkan terjadinya missing value pada beberapa kolom dataset, diantaranya pada kolom stage, benign_sample_diagnosis, plasma_CA19_9 dan REG1A."""

df.info()

df.describe()

"""##Visualisasi Data

**Distribusi Kolom Kategorial**
"""

categorical_fitur = ['diagnosis']
numerical_fitur =['age', 'plasma_CA19-9', 'creatinine', 'LYVE1', 'REG1B', 'TEF1', 'REG1A']
fitur = categorical_fitur[0]
count = df[fitur].value_counts()
persen = 100*df[fitur].value_counts(normalize=True)
data = pd.DataFrame({'Total Sampel':count,
                     'Persentase':persen.round(1)})
print (data)
count.plot(kind='bar', title='Hasil Diagnosis');

"""Pada Hasil diagnosis, jika dilihat terdapat 3 jenis nilai. 3 jenis nilai tersebut merepresentasikan kondisi pankreas manusia. Dalam hal ini, nilai 1 merepresentasikan bahwa kondisi pankreas sehat, nilai 2 merepresentasikan bahwa kondisi pankreas non kanker dan nilai 3 merepresentasikan bahwa kondisi kanker pankreas(pasien dengan adenokarsinoma duktus pankreas).

**Distribusi Kolom Numerikal**
"""

df.hist(bins=100,
        figsize=(20,20))
plt.show()

"""**Correlation Matrix**"""

df.corr()
plt.figure(figsize=(20,10))
korelasi_matrix = df.corr().round(1)
sns.heatmap(korelasi_matrix,
            annot=True,
            linewidths=0.5,
            fmt='.2f',
            cmap='YlGnBu')
plt.title("Correlation Matrix for Numerix Feature", size=30)

"""##Data Preparation

Melakukan drop kolom pada fitur sample_id, patient_cohort, sample_origin, stage, dan benign_sample_diagnosis. Hal ini dilakukan karena proyek ini berfokus pada deteksi pasien terkana penyakit kanker pankreas atau tidak, sehingga beberapa fitur tersebut tidak diperlukan.
"""

df = df.drop(columns=['sample_id', 'patient_cohort', 'sample_origin', 'stage', 'benign_sample_diagnosis'])
df.head()

"""Melakukan penanganan missing value terhadap dataset yang digunakan. Hal ini dilakukan, karena masih terdapat banyak missing value pada kolom/fitur dataset sehingga harus diatas dengan melakukan perhitungan nilai rata-rata(mean) pada kolom yang bermasalah."""

for a in df[:]:
  if a!='sex':
    df[a] = df[a].fillna(df[a].mean())
df.head()

"""Melakukan pengecekan terhadap dataset yang telah di drop dan telah dilakukan penanganan missing value. Pengecekan tersebut dilakukan dengan menggunakan isnull().sum()"""

df.isnull().sum()

"""**Data Unique**

Melakukan pengecekan data unique, agar mempermudah proses analisis
"""

df['diagnosis'].unique()

"""**Mapping Diagnosis**

Melakukan mapping/replace terhadap kolom diagnosis dari type object ke numerik agar bisa dibaca mesin. Oleh karena itu, pada proyek ini nilainya akan diubah dan hanya akan digolongkan ke 2 nilai yaitu 0 sebagai indikator bahwa bukan penderita kanker dan 1 sebagai indikator bahwa pasien terkena kanker pankreas.
"""

df['diagnosis'].replace([1,2,3],
                        [0,0,1],
                        inplace=True)
df

"""Melakukan proses one-hot-encoding, yang berfungsi untuk mengubah variabel kategorikal menjadi variabel numerikal."""

df = pd.get_dummies(df)
df

"""##Split pada Dataset

Melakukan pembagian dataset menjadi dengan 80% untuk data latih dan 20% untuk data uji. Pembagian dataset ini menggunakan modul train_test_split dari scikit-learn.
"""

x = df.drop('diagnosis',axis=1)
y = df['diagnosis']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state=5)

print(f'Total of sample in whole dataset: {len(x)}')
print(f'Total of sample in train dataset: {len(x_train)}')
print(f'Total of sample in test dataset: {len(x_test)}')

"""##Standard Scaler

Melakukan normalisasi pada data dengan menggunakan Standard Scaler (MinMaxScaler)
"""

sc = MinMaxScaler()
sc.fit(x_train)
x_train = sc.transform(x_train)
x_test = sc.transform(x_test)

"""## Modelling

**Model KNN**
"""

models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'SVM'])

knn = KNeighborsClassifier()
knn.fit(x_train, y_train)

knn_prediksi = knn.predict(x_test)
accuracy_score(y_test, knn_prediksi)

from sklearn.metrics import accuracy_score, classification_report
knn_cr = classification_report(y_test, knn_prediksi, output_dict=True)
pd.DataFrame(knn_cr).transpose()

"""**Model Random Forest**"""

rf = RandomForestClassifier()
rf.fit(x_train, y_train)

rf_prediksi = rf.predict(x_test)
accuracy_score(y_test, rf_prediksi)

rf_cr = classification_report(y_test, rf_prediksi, output_dict=True)
pd.DataFrame(rf_cr).transpose()

"""**Model SVM**"""

svm = SVC()
svm.fit(x_train, y_train)

svm_prediksi = svm.predict(x_test)
accuracy_score(y_test, knn_prediksi)

svm_cr = classification_report(y_test, svm_prediksi, output_dict=True)
pd.DataFrame(svm_cr).transpose()

"""##Evaluation

**Perbandingan Matrix antar model**
"""

metrics = pd.DataFrame({'accuracy' : [knn_cr['accuracy'], rf_cr['accuracy'], svm_cr['accuracy']], 
                        'f1-score_0' : [knn_cr['0']['f1-score'], rf_cr['0']['f1-score'], svm_cr['0']['f1-score']],
                        'precision_0' : [knn_cr['0']['precision'], rf_cr['0']['precision'], svm_cr['0']['precision']],
                        'recall_0' : [knn_cr['0']['recall'], rf_cr['0']['recall'], svm_cr['0']['recall']],
                        'f1-score_1' : [knn_cr['1']['f1-score'], rf_cr['1']['f1-score'], svm_cr['1']['f1-score']],
                        'precision_1' : [knn_cr['1']['precision'], rf_cr['1']['precision'], svm_cr['1']['precision']],
                        'recall_1' : [knn_cr['1']['recall'], rf_cr['1']['recall'], svm_cr['1']['recall']]},
                        index=['KNN','RF','SVM'])
multiheader = [('','accuracy'),
               ('0', 'f1-score'),
               ('0', 'precision'),
               ('0', 'recall'),
               ('1', 'f1-score'),
               ('1', 'precision'),
               ('1', 'recall')]
metrics.columns = pd.MultiIndex.from_tuples(multiheader)
# Menampilkan dataframe
metrics

"""##Confussion Matrix

**Visualisasi Confussion Matrix KNN**
"""

from sklearn.metrics import accuracy_score, confusion_matrix
knn_cm = confusion_matrix(y_test, knn_prediksi)
sns.heatmap(knn_cm,
            annot=True,
            fmt='.2f',
            cmap='YlGnBu')

"""**Visualisasi Confussion Matrix Random Forest**"""

rf_cm = confusion_matrix(y_test, rf_prediksi)
sns.heatmap(rf_cm,
            annot=True,
            fmt='.2f',
            cmap='YlGnBu')

"""**Visualisasi Confussion Matrix SVM**"""

svm_cm = confusion_matrix(y_test, svm_prediksi)
sns.heatmap(svm_cm,
            annot=True,
            fmt='.2f',
            cmap='YlGnBu')